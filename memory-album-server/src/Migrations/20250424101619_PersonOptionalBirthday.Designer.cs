// <auto-generated />
using System;
using MemoryAlbumServer.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MemoryAlbumServer.Migrations
{
    [DbContext(typeof(MemoryAlbumContext))]
    [Migration("20250424101619_PersonOptionalBirthday")]
    partial class PersonOptionalBirthday
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("MemoryAlbumServer.Models.Entities.Album", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("CoverPhotoId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("CoverPhotoId");

                    b.ToTable("Albums");
                });

            modelBuilder.Entity("MemoryAlbumServer.Models.Entities.Event", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("AlbumId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<Guid?>("LocationId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("AlbumId");

                    b.HasIndex("LocationId");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("MemoryAlbumServer.Models.Entities.Location", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("MemoryAlbumServer.Models.Entities.Media.Medium", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("varchar(8)");

                    b.HasKey("Id");

                    b.ToTable("Media");

                    b.HasDiscriminator().HasValue("Medium");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("MemoryAlbumServer.Models.Entities.Person", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("Birthday")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<Guid?>("EventId")
                        .HasColumnType("char(36)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("LastName")
                        .HasColumnType("longtext");

                    b.Property<Guid?>("ProfilePictureId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("ProfilePictureId");

                    b.ToTable("People");
                });

            modelBuilder.Entity("MemoryAlbumServer.Models.Entities.Tag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Color")
                        .HasColumnType("longtext");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<Guid?>("EventId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("MemoryAlbumServer.Models.Entities.Media.Photo", b =>
                {
                    b.HasBaseType("MemoryAlbumServer.Models.Entities.Media.Medium");

                    b.Property<byte[]>("Data")
                        .IsRequired()
                        .HasColumnType("longblob");

                    b.Property<Guid?>("EventId")
                        .HasColumnType("char(36)");

                    b.HasIndex("EventId");

                    b.HasDiscriminator().HasValue("Photo");
                });

            modelBuilder.Entity("MemoryAlbumServer.Models.Entities.Media.Video", b =>
                {
                    b.HasBaseType("MemoryAlbumServer.Models.Entities.Media.Medium");

                    b.Property<byte[]>("Data")
                        .IsRequired()
                        .HasColumnType("longblob");

                    b.Property<Guid?>("EventId")
                        .HasColumnType("char(36)");

                    b.HasIndex("EventId");

                    b.ToTable("Media", t =>
                        {
                            t.Property("Data")
                                .HasColumnName("Video_Data");

                            t.Property("EventId")
                                .HasColumnName("Video_EventId");
                        });

                    b.HasDiscriminator().HasValue("Video");
                });

            modelBuilder.Entity("MemoryAlbumServer.Models.Entities.Album", b =>
                {
                    b.HasOne("MemoryAlbumServer.Models.Entities.Media.Photo", "CoverPhoto")
                        .WithMany()
                        .HasForeignKey("CoverPhotoId");

                    b.Navigation("CoverPhoto");
                });

            modelBuilder.Entity("MemoryAlbumServer.Models.Entities.Event", b =>
                {
                    b.HasOne("MemoryAlbumServer.Models.Entities.Album", null)
                        .WithMany("Events")
                        .HasForeignKey("AlbumId");

                    b.HasOne("MemoryAlbumServer.Models.Entities.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId");

                    b.OwnsOne("MemoryAlbumServer.Models.Properties.GeoPosition", "Position", b1 =>
                        {
                            b1.Property<Guid>("EventId")
                                .HasColumnType("char(36)");

                            b1.Property<double>("Latitude")
                                .HasColumnType("double");

                            b1.Property<double>("Longitude")
                                .HasColumnType("double");

                            b1.HasKey("EventId");

                            b1.ToTable("Events");

                            b1.WithOwner()
                                .HasForeignKey("EventId");
                        });

                    b.Navigation("Location");

                    b.Navigation("Position")
                        .IsRequired();
                });

            modelBuilder.Entity("MemoryAlbumServer.Models.Entities.Location", b =>
                {
                    b.OwnsOne("MemoryAlbumServer.Models.Properties.GeoPosition", "Anchor", b1 =>
                        {
                            b1.Property<Guid>("LocationId")
                                .HasColumnType("char(36)");

                            b1.Property<double>("Latitude")
                                .HasColumnType("double");

                            b1.Property<double>("Longitude")
                                .HasColumnType("double");

                            b1.HasKey("LocationId");

                            b1.ToTable("Locations");

                            b1.WithOwner()
                                .HasForeignKey("LocationId");
                        });

                    b.OwnsOne("MemoryAlbumServer.Models.Properties.GeoJson", "Zone", b1 =>
                        {
                            b1.Property<Guid>("LocationId")
                                .HasColumnType("char(36)");

                            b1.Property<string>("Json")
                                .IsRequired()
                                .HasColumnType("longtext");

                            b1.HasKey("LocationId");

                            b1.ToTable("Locations");

                            b1.WithOwner()
                                .HasForeignKey("LocationId");
                        });

                    b.Navigation("Anchor")
                        .IsRequired();

                    b.Navigation("Zone")
                        .IsRequired();
                });

            modelBuilder.Entity("MemoryAlbumServer.Models.Entities.Person", b =>
                {
                    b.HasOne("MemoryAlbumServer.Models.Entities.Event", null)
                        .WithMany("People")
                        .HasForeignKey("EventId");

                    b.HasOne("MemoryAlbumServer.Models.Entities.Media.Photo", "ProfilePicture")
                        .WithMany()
                        .HasForeignKey("ProfilePictureId");

                    b.Navigation("ProfilePicture");
                });

            modelBuilder.Entity("MemoryAlbumServer.Models.Entities.Tag", b =>
                {
                    b.HasOne("MemoryAlbumServer.Models.Entities.Event", null)
                        .WithMany("Tags")
                        .HasForeignKey("EventId");
                });

            modelBuilder.Entity("MemoryAlbumServer.Models.Entities.Media.Photo", b =>
                {
                    b.HasOne("MemoryAlbumServer.Models.Entities.Event", null)
                        .WithMany("Photos")
                        .HasForeignKey("EventId");
                });

            modelBuilder.Entity("MemoryAlbumServer.Models.Entities.Media.Video", b =>
                {
                    b.HasOne("MemoryAlbumServer.Models.Entities.Event", null)
                        .WithMany("Videos")
                        .HasForeignKey("EventId");
                });

            modelBuilder.Entity("MemoryAlbumServer.Models.Entities.Album", b =>
                {
                    b.Navigation("Events");
                });

            modelBuilder.Entity("MemoryAlbumServer.Models.Entities.Event", b =>
                {
                    b.Navigation("People");

                    b.Navigation("Photos");

                    b.Navigation("Tags");

                    b.Navigation("Videos");
                });
#pragma warning restore 612, 618
        }
    }
}
